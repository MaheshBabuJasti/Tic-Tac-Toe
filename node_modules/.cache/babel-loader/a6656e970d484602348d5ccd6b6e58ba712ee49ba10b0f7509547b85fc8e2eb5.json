{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jasti\\\\OneDrive\\\\Documents\\\\react_codes\\\\tic-tac-toe\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport Gameboard from \"./Gameboard.js\";\nimport Header from \"./Header.js\";\nimport Log from \"./Log.js\";\nimport Player from \"./Player.js\";\nimport React from 'react';\nimport { WINNING_COMBINATIONS } from \"./winning-combinations.js\";\nimport Gameover from \"./Gameover.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst intialGameBoard = [[null, null, null], [null, null, null], [null, null, null]];\nfunction deriveActivePlayer(gameTurns) {\n  let currentPlayer = 'X';\n  if (gameTurns.length > 0 && gameTurns[0].player === 'X') {\n    currentPlayer = 'O';\n  }\n  return currentPlayer;\n}\nfunction App() {\n  _s();\n  const [players, setPlayers] = React.useState({\n    X: 'Player 1',\n    O: 'Player 2'\n  });\n  const [gameTurns, setGameTurns] = React.useState([]);\n  // const [activePlayer, setActivePlayer]=React.useState('X')\n  const activePlayer = deriveActivePlayer(gameTurns);\n  const gameBoard = [...intialGameBoard.map(array => [...array])];\n  for (const turn of gameTurns) {\n    const {\n      square,\n      player\n    } = turn;\n    const {\n      row,\n      col\n    } = square;\n    gameBoard[row][col] = player;\n  }\n  let winner;\n  for (const combination of WINNING_COMBINATIONS) {\n    const firstSymbol = gameBoard[combination[0].row][combination[0].column];\n    const secondSymbol = gameBoard[combination[1].row][combination[1].column];\n    const thirdSymbol = gameBoard[combination[2].row][combination[2].column];\n    if (firstSymbol && firstSymbol === secondSymbol && firstSymbol === thirdSymbol) {\n      winner = players[firstSymbol];\n    }\n  }\n  const isDraw = gameTurns.length === 9 && !winner;\n  function handleSelectSquare(rowIndex, colIndex) {\n    // setActivePlayer((curActiveplayer)=>(curActiveplayer==='X'?'O':'X'))\n    setGameTurns(prevTurn => {\n      const currentPlayer = deriveActivePlayer(prevTurn);\n      const updatedTurn = [{\n        square: {\n          row: rowIndex,\n          col: colIndex\n        },\n        player: currentPlayer\n      }, ...prevTurn];\n      return updatedTurn;\n    });\n  }\n  function handleRestart() {\n    setGameTurns([]);\n  }\n  function handlePlayerName(symbol, nName) {\n    setPlayers(prevPlayer => {\n      return {\n        ...prevPlayer,\n        [symbol]: nName\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"game-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"ol\", {\n          id: \"players\",\n          className: \"highlight-player\",\n          children: [/*#__PURE__*/_jsxDEV(Player, {\n            name: \"PLAYER1\",\n            symbol: \"X\",\n            isActive: activePlayer === 'X',\n            onChangeName: handlePlayerName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Player, {\n            name: \"PLAYER2\",\n            symbol: \"O\",\n            isActive: activePlayer === 'O',\n            onChangeName: handlePlayerName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this), (winner || isDraw) && /*#__PURE__*/_jsxDEV(Gameover, {\n          winner: winner,\n          onRestart: handleRestart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 32\n        }, this), /*#__PURE__*/_jsxDEV(Gameboard, {\n          onSelectSquare: handleSelectSquare,\n          board: gameBoard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Log, {\n        turns: gameTurns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"8fFPjntbMfgUNbHDFY7lMZ7Pa7Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Gameboard","Header","Log","Player","React","WINNING_COMBINATIONS","Gameover","jsxDEV","_jsxDEV","Fragment","_Fragment","intialGameBoard","deriveActivePlayer","gameTurns","currentPlayer","length","player","App","_s","players","setPlayers","useState","X","O","setGameTurns","activePlayer","gameBoard","map","array","turn","square","row","col","winner","combination","firstSymbol","column","secondSymbol","thirdSymbol","isDraw","handleSelectSquare","rowIndex","colIndex","prevTurn","updatedTurn","handleRestart","handlePlayerName","symbol","nName","prevPlayer","children","fileName","_jsxFileName","lineNumber","columnNumber","id","className","name","isActive","onChangeName","onRestart","onSelectSquare","board","turns","_c","$RefreshReg$"],"sources":["C:/Users/jasti/OneDrive/Documents/react_codes/tic-tac-toe/src/App.js"],"sourcesContent":["import Gameboard from \"./Gameboard.js\"\nimport Header from \"./Header.js\"\nimport Log from \"./Log.js\"\nimport Player from \"./Player.js\"\nimport React from 'react'\nimport { WINNING_COMBINATIONS } from \"./winning-combinations.js\"\nimport Gameover from \"./Gameover.js\";\nconst intialGameBoard=[\n  [null,null,null],\n  [null,null,null],\n  [null,null,null],\n  \n]\n\nfunction deriveActivePlayer(gameTurns){\n      let currentPlayer='X';\n      \n      if (gameTurns.length>0 && gameTurns[0].player==='X'){\n        currentPlayer='O';\n      }\n      return currentPlayer\n}\nfunction App() {\n  const [players,setPlayers]=React.useState({\n    X:'Player 1',\n    O:'Player 2'\n  });\n  const [gameTurns,setGameTurns]=React.useState([])\n  // const [activePlayer, setActivePlayer]=React.useState('X')\n  const activePlayer=deriveActivePlayer(gameTurns);\n\n  const gameBoard=[...intialGameBoard.map(array=>[...array])];\n\n    for(const turn of gameTurns){\n        const {square,player}=turn;\n        const {row,col}=square\n        gameBoard[row][col]=player\n    }\n  let winner;\n  for(const combination of WINNING_COMBINATIONS){\n    const firstSymbol=gameBoard[combination[0].row][combination[0].column]\n    const secondSymbol=gameBoard[combination[1].row][combination[1].column]\n    const thirdSymbol=gameBoard[combination[2].row][combination[2].column]\n\n    if(firstSymbol && firstSymbol===secondSymbol && firstSymbol===thirdSymbol){\n      winner=players[firstSymbol];\n    }\n  }\n\n  const isDraw=gameTurns.length ===9 && !winner;\n\n  function handleSelectSquare(rowIndex,colIndex){\n    // setActivePlayer((curActiveplayer)=>(curActiveplayer==='X'?'O':'X'))\n    setGameTurns(prevTurn=>{\n      const currentPlayer=deriveActivePlayer(prevTurn)\n      const updatedTurn=[\n        {square:{row:rowIndex,col:colIndex},player:currentPlayer},...prevTurn];\n      return updatedTurn;\n    })\n  }\n  \n  function handleRestart(){\n    setGameTurns([]);\n  }\n  function handlePlayerName(symbol,nName){\n    setPlayers(prevPlayer=>{\n      return {\n        ...prevPlayer,\n        [symbol]:nName\n      }\n\n    })\n\n  }\n\n  return (\n    <>\n    <Header />\n    <main>\n      <div id=\"game-container\">\n        <ol id=\"players\" className=\"highlight-player\">\n          <Player name=\"PLAYER1\" symbol=\"X\" isActive={activePlayer==='X'} onChangeName={handlePlayerName}/>\n          <Player name=\"PLAYER2\" symbol=\"O\" isActive={activePlayer==='O'} onChangeName={handlePlayerName}/>\n        </ol>\n        {(winner || isDraw) && <Gameover winner={winner} onRestart={handleRestart}/>}\n        <Gameboard onSelectSquare={handleSelectSquare} board={gameBoard}/>\n      </div>\n      <Log turns={gameTurns}/>\n\n    </main>\n    </>\n\n  )\n}\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}